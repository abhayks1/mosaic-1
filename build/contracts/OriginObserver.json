{
  "contractName": "OriginObserver",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "StateRootAvailable",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "genesisMaxStateRootLimitCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "genesisOriginBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "genesisOriginStateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCoconsensus",
      "outputs": [
        {
          "internalType": "contract CoconsensusInterface",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getLatestStateRootBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber_",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getStateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "stateRoot_",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "setup",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "anchorStateRoot",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"StateRootAvailable\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"anchorStateRoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesisMaxStateRootLimitCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesisOriginBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesisOriginStateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCoconsensus\",\"outputs\":[{\"internalType\":\"contract CoconsensusInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestStateRootBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getStateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot_\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"anchorStateRoot(uint256,bytes32)\":{\"details\":\"Function requires:         - Only coconsensus contract address can call this function.\",\"params\":{\"_blockNumber\":\"Block number for which state root needs to                     update.\",\"_stateRoot\":\"State root of input block number.\"}},\"getCoconsensus()\":{\"return\":\"Coconsensus contract address.\"},\"getLatestStateRootBlockNumber()\":{\"return\":\"uint256 Block number of the latest anchored state root.\"},\"getStateRoot(uint256)\":{\"params\":{\"_blockNumber\":\"The block number for which the state root is needed.\"},\"return\":\"bytes32 State root of the given number.\"},\"setup()\":{\"details\":\"This can be called by anyone only once. The check in StateRootProvider::setup     ensures this in its circular buffer setup. Another check is provided by     StateRootProvider::anchorStateRootInternal can be only called once for a given block     number and has to be increasing.\"}},\"title\":\"OriginObserver - Contract on the auxiliary chain that stores the       state root of the origin chain.\"},\"userdoc\":{\"methods\":{\"anchorStateRoot(uint256,bytes32)\":{\"notice\":\"Anchor the state root for an (increasing) block number.\"},\"getCoconsensus()\":{\"notice\":\"Gets the coconsensus contract address.\"},\"getLatestStateRootBlockNumber()\":{\"notice\":\"Gets the block number of latest anchored state root.\"},\"getStateRoot(uint256)\":{\"notice\":\"Get the state root for the given block number.\"},\"setup()\":{\"notice\":\"Setup function for origin observer contract.\"}},\"notice\":\"This contract stores the state root and block number from the        origin chain. This contract is Coconsensus module. Only coconsensus        contract will be able to anchor the state root.\"}},\"settings\":{\"compilationTarget\":{\"/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/anchor/OriginObserver.sol\":\"OriginObserver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/anchor/GenesisOriginObserver.sol\":{\"keccak256\":\"0x8e06480153083f18a53eec3f89f014c922b4e2ae76f1ef216a37b8513dec324a\",\"urls\":[\"bzz-raw://3407016779714639dc7c1dfd6e9289b49f8349fe50b08c56c31b0459ebd0b33e\",\"dweb:/ipfs/QmQZe9Lm3KyEGzfVQC6xwDNHX9VkY59p7NMpYK8ASzsLqK\"]},\"/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/anchor/OriginObserver.sol\":{\"keccak256\":\"0x10ab35770fb3d6ba3c1c51da7c2acbbcc6cb54e087c328341af3850f127606ab\",\"urls\":[\"bzz-raw://c094356d3c929d45981f53e4464ebeb027d6ac7b17b4144ff960694c948545ac\",\"dweb:/ipfs/QmcCKuhc2GKq6yYeoVBC9bEJicKCm8BagLTKKpTmphjuT6\"]},\"/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/anchor/StateRootProvider.sol\":{\"keccak256\":\"0xa87d1314d59cb0d362e8e76e742575bc98d77620cd965c6b0bdce14dba1ab195\",\"urls\":[\"bzz-raw://6b5e0705a7e3a45af926d47f27cc53070d9932c9494d619c44a553ff85c67bc2\",\"dweb:/ipfs/QmYYr2PsJnA7tfYs4ZkY4gSJUkNv6dVrt9CXvNv7iygSfW\"]},\"/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/consensus/CoconsensusInterface.sol\":{\"keccak256\":\"0x0f3733398949bf1b23a80e24d0db0f9b88ede265fa4235878c3032c9614ee3b1\",\"urls\":[\"bzz-raw://43b4f0e9ca35fb3379bbf4645dfc2379fd8f53b419066c4976874b5c3e7e5ae0\",\"dweb:/ipfs/Qmd2YzDr4jygAnj3tSg6d9jfajqFnhg8SaZk5Gg7Vw4L9H\"]},\"/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/consensus/CoconsensusModule.sol\":{\"keccak256\":\"0xabe9fce2fae63ee9d6186ba03faa248d9d9fe8ef3202218e473dfb8d8ba4df71\",\"urls\":[\"bzz-raw://bb79cb8133c43b7ae5973180717b033a2bc9325cf25cd1a4879c9b805fee999e\",\"dweb:/ipfs/QmbUW7mmQXRJRZTVLLpNDoHZhyw2jiTwumHi92MmGE1wD5\"]},\"/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/lib/CircularBufferUint.sol\":{\"keccak256\":\"0xa9d4af0caacd760200028696a0e489ba170568fcfae0fc90d93aab1af88e8734\",\"urls\":[\"bzz-raw://7eead9e2e268db6f8144820c293e944420017df2c3caa65f3ce55cb27f3784f7\",\"dweb:/ipfs/QmNnLSJZXR7KLZ9SCTzWsyS8Z7DW4peaaf1f3b76rAJziV\"]},\"/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/proxies/MasterCopyNonUpgradable.sol\":{\"keccak256\":\"0x675eaeceda96f0a2ac02345f61797c120bef572f362309ec58de3b21e321a434\",\"urls\":[\"bzz-raw://3dd3e80d5da6f94166f45b8b9f80fe08c29477ce0f0ee03d08b7b35558bc373e\",\"dweb:/ipfs/QmTkdRqRx8kicDK7GvWQsUK25PPLNE8fvotfhwpLJaECbR\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b\",\"urls\":[\"bzz-raw://1eb493553b27efd46c231a836a83ce50d215639feb97b4aac9f301d0fd034ff5\",\"dweb:/ipfs/QmbMdvSXcqGKxeeYvzF3VrWpoHQyVzMXBhzhAokF2Gdymv\"]}},\"version\":1}",
  "bytecode": "0x6080604052600480546001600160a01b031916614d0017905534801561002457600080fd5b50610585806100346000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063691601951161005b57806369160195146100f85780636e47aff414610100578063ba0bba4014610108578063c38019381461011057610088565b80631f9495091461008d57806323609af7146100a75780635cf12c78146100cb5780635e3703bd146100f0575b600080fd5b61009561012d565b60408051918252519081900360200190f35b6100af610133565b604080516001600160a01b039092168252519081900360200190f35b6100ee600480360360408110156100e157600080fd5b5080359060200135610143565b005b6100956101a8565b6100956101b7565b6100956101bd565b6100ee6101c3565b6100956004803603602081101561012657600080fd5b50356101de565b60035481565b6004546001600160a01b03165b90565b61014b610133565b6001600160a01b0316336001600160a01b03161461019a5760405162461bcd60e51b81526004018080602001828103825260358152602001806104576035913960400191505060405180910390fd5b6101a482826101f0565b5050565b60006101b26102f6565b905090565b60015481565b60025481565b6101ce600354610317565b6101dc6001546002546101f0565b565b60009081526007602052604090205490565b80610242576040805162461bcd60e51b815260206004820152601c60248201527f537461746520726f6f74206d757374206e6f74206265207a65726f2e00000000604482015290519081900360640190fd5b61024a6102f6565b82116102875760405162461bcd60e51b815260040180806020018281038252605181526020018061048c6051913960600191505060405180910390fd5b60008281526007602052604081208290556102a183610323565b600081815260076020908152604080832092909255815186815290810185905281519293507f0a57f5c610ae4bcec0e406f2d350ddffa2fb3628fed5da3d7dac3a3c1cdb66c2929081900390910190a1505050565b600060056006548154811061030757fe5b9060005260206000200154905090565b6103208161036a565b50565b600061032d6103f4565b60056006548154811061033c57fe5b906000526020600020015490508160056006548154811061035957fe5b600091825260209091200155919050565b600081116103a95760405162461bcd60e51b815260040180806020018281038252604d815260200180610504604d913960600191505060405180910390fd5b600554156103e85760405162461bcd60e51b81526004018080602001828103825260278152602001806104dd6027913960400191505060405180910390fd5b806101a460058261040f565b600680546001019081905560055414156101dc576000600655565b81548183558181111561043357600083815260209020610433918101908301610438565b505050565b61014091905b80821115610452576000815560010161043e565b509056fe4f6e6c792074686520436f636f6e73656e73757320636f6e74726163742063616e2063616c6c20746869732066756e6374696f6e2e476976656e20626c6f636b206e756d626572206973206c6f776572206f7220657175616c20746f206869676865737420616e63686f72656420737461746520726f6f7420626c6f636b206e756d6265722e43697263756c6172206275666665722073697a652063616e206265207365747570206f6e63652e546865206d6178206e756d626572206f66206974656d7320746f2073746f726520696e20612063697263756c617220627566666572206d7573742062652067726561746572207468616e20302ea265627a7a72315820b67cff6f0c92d1ece357802a3f92cb1299e56792ed52de9d5e78410629a542ec64736f6c634300050d0032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063691601951161005b57806369160195146100f85780636e47aff414610100578063ba0bba4014610108578063c38019381461011057610088565b80631f9495091461008d57806323609af7146100a75780635cf12c78146100cb5780635e3703bd146100f0575b600080fd5b61009561012d565b60408051918252519081900360200190f35b6100af610133565b604080516001600160a01b039092168252519081900360200190f35b6100ee600480360360408110156100e157600080fd5b5080359060200135610143565b005b6100956101a8565b6100956101b7565b6100956101bd565b6100ee6101c3565b6100956004803603602081101561012657600080fd5b50356101de565b60035481565b6004546001600160a01b03165b90565b61014b610133565b6001600160a01b0316336001600160a01b03161461019a5760405162461bcd60e51b81526004018080602001828103825260358152602001806104576035913960400191505060405180910390fd5b6101a482826101f0565b5050565b60006101b26102f6565b905090565b60015481565b60025481565b6101ce600354610317565b6101dc6001546002546101f0565b565b60009081526007602052604090205490565b80610242576040805162461bcd60e51b815260206004820152601c60248201527f537461746520726f6f74206d757374206e6f74206265207a65726f2e00000000604482015290519081900360640190fd5b61024a6102f6565b82116102875760405162461bcd60e51b815260040180806020018281038252605181526020018061048c6051913960600191505060405180910390fd5b60008281526007602052604081208290556102a183610323565b600081815260076020908152604080832092909255815186815290810185905281519293507f0a57f5c610ae4bcec0e406f2d350ddffa2fb3628fed5da3d7dac3a3c1cdb66c2929081900390910190a1505050565b600060056006548154811061030757fe5b9060005260206000200154905090565b6103208161036a565b50565b600061032d6103f4565b60056006548154811061033c57fe5b906000526020600020015490508160056006548154811061035957fe5b600091825260209091200155919050565b600081116103a95760405162461bcd60e51b815260040180806020018281038252604d815260200180610504604d913960600191505060405180910390fd5b600554156103e85760405162461bcd60e51b81526004018080602001828103825260278152602001806104dd6027913960400191505060405180910390fd5b806101a460058261040f565b600680546001019081905560055414156101dc576000600655565b81548183558181111561043357600083815260209020610433918101908301610438565b505050565b61014091905b80821115610452576000815560010161043e565b509056fe4f6e6c792074686520436f636f6e73656e73757320636f6e74726163742063616e2063616c6c20746869732066756e6374696f6e2e476976656e20626c6f636b206e756d626572206973206c6f776572206f7220657175616c20746f206869676865737420616e63686f72656420737461746520726f6f7420626c6f636b206e756d6265722e43697263756c6172206275666665722073697a652063616e206265207365747570206f6e63652e546865206d6178206e756d626572206f66206974656d7320746f2073746f726520696e20612063697263756c617220627566666572206d7573742062652067726561746572207468616e20302ea265627a7a72315820b67cff6f0c92d1ece357802a3f92cb1299e56792ed52de9d5e78410629a542ec64736f6c634300050d0032",
  "sourceMap": "1143:1362:5:-;;;775:88:19;;;-1:-1:-1;;;;;;775:88:19;820:42;775:88;;;1143:1362:5;5:2:-1;;;;30:1;27;20:12;5:2;1143:1362:5;;;;;;;",
  "deployedSourceMap": "1143:1362:5:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1143:1362:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1157:44:3;;;:::i;:::-;;;;;;;;;;;;;;;;1248:133:19;;;:::i;:::-;;;;-1:-1:-1;;;;;1248:133:19;;;;;;;;;;;;;;2285:218:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2285:218:5;;;;;;;:::i;:::-;;1667:171:6;;;:::i;964:39:3:-;;;:::i;1040:37::-;;;:::i;1707:198:5:-;;;:::i;1316:183:6:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1316:183:6;;:::i;1157:44:3:-;;;;:::o;1248:133:19:-;1355:18;;-1:-1:-1;;;;;1355:18:19;1248:133;;:::o;2285:218:5:-;976:16:19;:14;:16::i;:::-;-1:-1:-1;;;;;954:39:19;:10;-1:-1:-1;;;;;954:39:19;;933:139;;;;-1:-1:-1;;;933:139:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2429:67:5;2471:12;2485:10;2429:41;:67::i;:::-;2285:218;;:::o;1667:171:6:-;1755:20;1806:25;:23;:25::i;:::-;1791:40;;1667:171;:::o;964:39:3:-;;;;:::o;1040:37::-;;;;:::o;1707:198:5:-;1743:54;1767:29;;1743:23;:54::i;:::-;1807:91;1849:24;;1875:22;;1807:41;:91::i;:::-;1707:198::o;1316:183:6:-;1421:18;1468:24;;;:10;:24;;;;;;;1316:183::o;2642:740::-;2829:24;2808:99;;;;;-1:-1:-1;;;2808:99:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;3001:25;:23;:25::i;:::-;2986:12;:40;2965:168;;;;-1:-1:-1;;;2965:168:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3144:24;;;;:10;:24;;;;;:37;;;3225:38;3155:12;3225:24;:38::i;:::-;3280:35;;;;:10;:35;;;;;;;;3273:42;;;;3331:44;;;;;;;;;;;;;3191:72;;-1:-1:-1;3331:44:6;;;;;;;;;;;2642:740;;;:::o;3134:90:34:-;3172:13;3205:5;3211;;3205:12;;;;;;;;;;;;;;;;3197:20;;3134:90;:::o;2083:126:6:-;2167:35;2187:14;2167:19;:35::i;:::-;2083:126;:::o;2667:306:34:-;2714:24;2750:11;:9;:11::i;:::-;2924:5;2930;;2924:12;;;;;;;;;;;;;;;;2905:31;;2961:5;2946;2952;;2946:12;;;;;;;;;;;;;;;;;:20;2667:306;;-1:-1:-1;2667:306:34:o;1840:361::-;1941:1;1929:9;:13;1908:137;;;;-1:-1:-1;;;1908:137:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2077:5;:12;:17;2056:103;;;;-1:-1:-1;;;2056:103:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2185:9;2170:24;:5;2185:9;2170:24;:::i;3495:123::-;3534:5;:7;;;;;;;;3564:5;:12;3555:21;3551:61;;;3600:1;3592:5;:9;3495:123::o;1143:1362:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;",
  "source": "pragma solidity >=0.5.0 <0.6.0;\n\n// Copyright 2020 OpenST Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport \"../anchor/GenesisOriginObserver.sol\";\nimport \"../anchor/StateRootProvider.sol\";\nimport \"../consensus/CoconsensusModule.sol\";\nimport \"../proxies/MasterCopyNonUpgradable.sol\";\n\n/**\n * @title OriginObserver - Contract on the auxiliary chain that stores the\n *        state root of the origin chain.\n *\n * @notice This contract stores the state root and block number from the\n *         origin chain. This contract is Coconsensus module. Only coconsensus\n *         contract will be able to anchor the state root.\n */\ncontract OriginObserver is\n    MasterCopyNonUpgradable,\n    GenesisOriginObserver,\n    CoconsensusModule,\n    StateRootProvider\n{\n\n    /* External Functions */\n\n    /**\n     * @notice Setup function for origin observer contract.\n     *\n     * @dev This can be called by anyone only once. The check in StateRootProvider::setup\n     *      ensures this in its circular buffer setup. Another check is provided by\n     *      StateRootProvider::anchorStateRootInternal can be only called once for a given block\n     *      number and has to be increasing.\n     */\n    function setup() external {\n        StateRootProvider.setup(genesisMaxStateRootLimitCount);\n        StateRootProvider.anchorStateRootInternal(genesisOriginBlockNumber, genesisOriginStateRoot);\n    }\n\n    /**\n     * @notice Anchor the state root for an (increasing) block number.\n     *\n     * @dev  Function requires:\n     *          - Only coconsensus contract address can call this function.\n     *\n     * @param _blockNumber Block number for which state root needs to\n     *                      update.\n     * @param _stateRoot State root of input block number.\n     */\n    function anchorStateRoot(\n        uint256 _blockNumber,\n        bytes32 _stateRoot\n    )\n        external\n        onlyCoconsensus\n    {\n        StateRootProvider.anchorStateRootInternal(_blockNumber, _stateRoot);\n    }\n}\n",
  "sourcePath": "/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/anchor/OriginObserver.sol",
  "ast": {
    "absolutePath": "/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/anchor/OriginObserver.sol",
    "exportedSymbols": {
      "OriginObserver": [
        225
      ]
    },
    "id": 226,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 178,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:5"
      },
      {
        "absolutePath": "/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/anchor/GenesisOriginObserver.sol",
        "file": "../anchor/GenesisOriginObserver.sol",
        "id": 179,
        "nodeType": "ImportDirective",
        "scope": 226,
        "sourceUnit": 164,
        "src": "621:45:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/anchor/StateRootProvider.sol",
        "file": "../anchor/StateRootProvider.sol",
        "id": 180,
        "nodeType": "ImportDirective",
        "scope": 226,
        "sourceUnit": 331,
        "src": "667:41:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/consensus/CoconsensusModule.sol",
        "file": "../consensus/CoconsensusModule.sol",
        "id": 181,
        "nodeType": "ImportDirective",
        "scope": 226,
        "sourceUnit": 3813,
        "src": "709:44:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/proxies/MasterCopyNonUpgradable.sol",
        "file": "../proxies/MasterCopyNonUpgradable.sol",
        "id": 182,
        "nodeType": "ImportDirective",
        "scope": 226,
        "sourceUnit": 12955,
        "src": "754:48:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 183,
              "name": "MasterCopyNonUpgradable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 12954,
              "src": "1174:23:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MasterCopyNonUpgradable_$12954",
                "typeString": "contract MasterCopyNonUpgradable"
              }
            },
            "id": 184,
            "nodeType": "InheritanceSpecifier",
            "src": "1174:23:5"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 185,
              "name": "GenesisOriginObserver",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 163,
              "src": "1203:21:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_GenesisOriginObserver_$163",
                "typeString": "contract GenesisOriginObserver"
              }
            },
            "id": 186,
            "nodeType": "InheritanceSpecifier",
            "src": "1203:21:5"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 187,
              "name": "CoconsensusModule",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3812,
              "src": "1230:17:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CoconsensusModule_$3812",
                "typeString": "contract CoconsensusModule"
              }
            },
            "id": 188,
            "nodeType": "InheritanceSpecifier",
            "src": "1230:17:5"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 189,
              "name": "StateRootProvider",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 330,
              "src": "1253:17:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_StateRootProvider_$330",
                "typeString": "contract StateRootProvider"
              }
            },
            "id": 190,
            "nodeType": "InheritanceSpecifier",
            "src": "1253:17:5"
          }
        ],
        "contractDependencies": [
          163,
          330,
          3812,
          8873,
          12954
        ],
        "contractKind": "contract",
        "documentation": "@title OriginObserver - Contract on the auxiliary chain that stores the\n       state root of the origin chain.\n * @notice This contract stores the state root and block number from the\n        origin chain. This contract is Coconsensus module. Only coconsensus\n        contract will be able to anchor the state root.",
        "fullyImplemented": true,
        "id": 225,
        "linearizedBaseContracts": [
          225,
          330,
          8873,
          3812,
          163,
          12954
        ],
        "name": "OriginObserver",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 206,
              "nodeType": "Block",
              "src": "1733:172:5",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 196,
                        "name": "genesisMaxStateRootLimitCount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 162,
                        "src": "1767:29:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 193,
                        "name": "StateRootProvider",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 330,
                        "src": "1743:17:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_StateRootProvider_$330_$",
                          "typeString": "type(contract StateRootProvider)"
                        }
                      },
                      "id": 195,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "setup",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 280,
                      "src": "1743:23:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 197,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1743:54:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 198,
                  "nodeType": "ExpressionStatement",
                  "src": "1743:54:5"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 202,
                        "name": "genesisOriginBlockNumber",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 158,
                        "src": "1849:24:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 203,
                        "name": "genesisOriginStateRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 160,
                        "src": "1875:22:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 199,
                        "name": "StateRootProvider",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 330,
                        "src": "1807:17:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_StateRootProvider_$330_$",
                          "typeString": "type(contract StateRootProvider)"
                        }
                      },
                      "id": 201,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "anchorStateRootInternal",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 329,
                      "src": "1807:41:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes32_$returns$__$",
                        "typeString": "function (uint256,bytes32)"
                      }
                    },
                    "id": 204,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1807:91:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 205,
                  "nodeType": "ExpressionStatement",
                  "src": "1807:91:5"
                }
              ]
            },
            "documentation": "@notice Setup function for origin observer contract.\n     * @dev This can be called by anyone only once. The check in StateRootProvider::setup\n     ensures this in its circular buffer setup. Another check is provided by\n     StateRootProvider::anchorStateRootInternal can be only called once for a given block\n     number and has to be increasing.",
            "id": 207,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setup",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 191,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1721:2:5"
            },
            "returnParameters": {
              "id": 192,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1733:0:5"
            },
            "scope": 225,
            "src": "1707:198:5",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 223,
              "nodeType": "Block",
              "src": "2419:84:5",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 219,
                        "name": "_blockNumber",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 209,
                        "src": "2471:12:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 220,
                        "name": "_stateRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 211,
                        "src": "2485:10:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 216,
                        "name": "StateRootProvider",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 330,
                        "src": "2429:17:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_StateRootProvider_$330_$",
                          "typeString": "type(contract StateRootProvider)"
                        }
                      },
                      "id": 218,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "anchorStateRootInternal",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 329,
                      "src": "2429:41:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes32_$returns$__$",
                        "typeString": "function (uint256,bytes32)"
                      }
                    },
                    "id": 221,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2429:67:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 222,
                  "nodeType": "ExpressionStatement",
                  "src": "2429:67:5"
                }
              ]
            },
            "documentation": "@notice Anchor the state root for an (increasing) block number.\n     * @dev  Function requires:\n         - Only coconsensus contract address can call this function.\n     * @param _blockNumber Block number for which state root needs to\n                     update.\n@param _stateRoot State root of input block number.",
            "id": 224,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 214,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 213,
                  "name": "onlyCoconsensus",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3801,
                  "src": "2399:15:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2399:15:5"
              }
            ],
            "name": "anchorStateRoot",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 212,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 209,
                  "name": "_blockNumber",
                  "nodeType": "VariableDeclaration",
                  "scope": 224,
                  "src": "2319:20:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 208,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2319:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 211,
                  "name": "_stateRoot",
                  "nodeType": "VariableDeclaration",
                  "scope": 224,
                  "src": "2349:18:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 210,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2349:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2309:64:5"
            },
            "returnParameters": {
              "id": 215,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2419:0:5"
            },
            "scope": 225,
            "src": "2285:218:5",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 226,
        "src": "1143:1362:5"
      }
    ],
    "src": "0:2506:5"
  },
  "legacyAST": {
    "absolutePath": "/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/anchor/OriginObserver.sol",
    "exportedSymbols": {
      "OriginObserver": [
        225
      ]
    },
    "id": 226,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 178,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:5"
      },
      {
        "absolutePath": "/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/anchor/GenesisOriginObserver.sol",
        "file": "../anchor/GenesisOriginObserver.sol",
        "id": 179,
        "nodeType": "ImportDirective",
        "scope": 226,
        "sourceUnit": 164,
        "src": "621:45:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/anchor/StateRootProvider.sol",
        "file": "../anchor/StateRootProvider.sol",
        "id": 180,
        "nodeType": "ImportDirective",
        "scope": 226,
        "sourceUnit": 331,
        "src": "667:41:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/consensus/CoconsensusModule.sol",
        "file": "../consensus/CoconsensusModule.sol",
        "id": 181,
        "nodeType": "ImportDirective",
        "scope": 226,
        "sourceUnit": 3813,
        "src": "709:44:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/abhay/Documents/projects/abhayforks/mosaic-1/contracts/proxies/MasterCopyNonUpgradable.sol",
        "file": "../proxies/MasterCopyNonUpgradable.sol",
        "id": 182,
        "nodeType": "ImportDirective",
        "scope": 226,
        "sourceUnit": 12955,
        "src": "754:48:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 183,
              "name": "MasterCopyNonUpgradable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 12954,
              "src": "1174:23:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MasterCopyNonUpgradable_$12954",
                "typeString": "contract MasterCopyNonUpgradable"
              }
            },
            "id": 184,
            "nodeType": "InheritanceSpecifier",
            "src": "1174:23:5"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 185,
              "name": "GenesisOriginObserver",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 163,
              "src": "1203:21:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_GenesisOriginObserver_$163",
                "typeString": "contract GenesisOriginObserver"
              }
            },
            "id": 186,
            "nodeType": "InheritanceSpecifier",
            "src": "1203:21:5"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 187,
              "name": "CoconsensusModule",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3812,
              "src": "1230:17:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CoconsensusModule_$3812",
                "typeString": "contract CoconsensusModule"
              }
            },
            "id": 188,
            "nodeType": "InheritanceSpecifier",
            "src": "1230:17:5"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 189,
              "name": "StateRootProvider",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 330,
              "src": "1253:17:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_StateRootProvider_$330",
                "typeString": "contract StateRootProvider"
              }
            },
            "id": 190,
            "nodeType": "InheritanceSpecifier",
            "src": "1253:17:5"
          }
        ],
        "contractDependencies": [
          163,
          330,
          3812,
          8873,
          12954
        ],
        "contractKind": "contract",
        "documentation": "@title OriginObserver - Contract on the auxiliary chain that stores the\n       state root of the origin chain.\n * @notice This contract stores the state root and block number from the\n        origin chain. This contract is Coconsensus module. Only coconsensus\n        contract will be able to anchor the state root.",
        "fullyImplemented": true,
        "id": 225,
        "linearizedBaseContracts": [
          225,
          330,
          8873,
          3812,
          163,
          12954
        ],
        "name": "OriginObserver",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 206,
              "nodeType": "Block",
              "src": "1733:172:5",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 196,
                        "name": "genesisMaxStateRootLimitCount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 162,
                        "src": "1767:29:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 193,
                        "name": "StateRootProvider",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 330,
                        "src": "1743:17:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_StateRootProvider_$330_$",
                          "typeString": "type(contract StateRootProvider)"
                        }
                      },
                      "id": 195,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "setup",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 280,
                      "src": "1743:23:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 197,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1743:54:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 198,
                  "nodeType": "ExpressionStatement",
                  "src": "1743:54:5"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 202,
                        "name": "genesisOriginBlockNumber",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 158,
                        "src": "1849:24:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 203,
                        "name": "genesisOriginStateRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 160,
                        "src": "1875:22:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 199,
                        "name": "StateRootProvider",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 330,
                        "src": "1807:17:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_StateRootProvider_$330_$",
                          "typeString": "type(contract StateRootProvider)"
                        }
                      },
                      "id": 201,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "anchorStateRootInternal",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 329,
                      "src": "1807:41:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes32_$returns$__$",
                        "typeString": "function (uint256,bytes32)"
                      }
                    },
                    "id": 204,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1807:91:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 205,
                  "nodeType": "ExpressionStatement",
                  "src": "1807:91:5"
                }
              ]
            },
            "documentation": "@notice Setup function for origin observer contract.\n     * @dev This can be called by anyone only once. The check in StateRootProvider::setup\n     ensures this in its circular buffer setup. Another check is provided by\n     StateRootProvider::anchorStateRootInternal can be only called once for a given block\n     number and has to be increasing.",
            "id": 207,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setup",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 191,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1721:2:5"
            },
            "returnParameters": {
              "id": 192,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1733:0:5"
            },
            "scope": 225,
            "src": "1707:198:5",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 223,
              "nodeType": "Block",
              "src": "2419:84:5",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 219,
                        "name": "_blockNumber",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 209,
                        "src": "2471:12:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 220,
                        "name": "_stateRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 211,
                        "src": "2485:10:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 216,
                        "name": "StateRootProvider",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 330,
                        "src": "2429:17:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_StateRootProvider_$330_$",
                          "typeString": "type(contract StateRootProvider)"
                        }
                      },
                      "id": 218,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "anchorStateRootInternal",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 329,
                      "src": "2429:41:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes32_$returns$__$",
                        "typeString": "function (uint256,bytes32)"
                      }
                    },
                    "id": 221,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2429:67:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 222,
                  "nodeType": "ExpressionStatement",
                  "src": "2429:67:5"
                }
              ]
            },
            "documentation": "@notice Anchor the state root for an (increasing) block number.\n     * @dev  Function requires:\n         - Only coconsensus contract address can call this function.\n     * @param _blockNumber Block number for which state root needs to\n                     update.\n@param _stateRoot State root of input block number.",
            "id": 224,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 214,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 213,
                  "name": "onlyCoconsensus",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3801,
                  "src": "2399:15:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2399:15:5"
              }
            ],
            "name": "anchorStateRoot",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 212,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 209,
                  "name": "_blockNumber",
                  "nodeType": "VariableDeclaration",
                  "scope": 224,
                  "src": "2319:20:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 208,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2319:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 211,
                  "name": "_stateRoot",
                  "nodeType": "VariableDeclaration",
                  "scope": 224,
                  "src": "2349:18:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 210,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2349:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2309:64:5"
            },
            "returnParameters": {
              "id": 215,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2419:0:5"
            },
            "scope": 225,
            "src": "2285:218:5",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 226,
        "src": "1143:1362:5"
      }
    ],
    "src": "0:2506:5"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.13+commit.5b0b510c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.17",
  "updatedAt": "2020-03-21T06:48:34.594Z",
  "devdoc": {
    "methods": {
      "anchorStateRoot(uint256,bytes32)": {
        "details": "Function requires:         - Only coconsensus contract address can call this function.",
        "params": {
          "_blockNumber": "Block number for which state root needs to                     update.",
          "_stateRoot": "State root of input block number."
        }
      },
      "getCoconsensus()": {
        "return": "Coconsensus contract address."
      },
      "getLatestStateRootBlockNumber()": {
        "return": "uint256 Block number of the latest anchored state root."
      },
      "getStateRoot(uint256)": {
        "params": {
          "_blockNumber": "The block number for which the state root is needed."
        },
        "return": "bytes32 State root of the given number."
      },
      "setup()": {
        "details": "This can be called by anyone only once. The check in StateRootProvider::setup     ensures this in its circular buffer setup. Another check is provided by     StateRootProvider::anchorStateRootInternal can be only called once for a given block     number and has to be increasing."
      }
    },
    "title": "OriginObserver - Contract on the auxiliary chain that stores the       state root of the origin chain."
  },
  "userdoc": {
    "methods": {
      "anchorStateRoot(uint256,bytes32)": {
        "notice": "Anchor the state root for an (increasing) block number."
      },
      "getCoconsensus()": {
        "notice": "Gets the coconsensus contract address."
      },
      "getLatestStateRootBlockNumber()": {
        "notice": "Gets the block number of latest anchored state root."
      },
      "getStateRoot(uint256)": {
        "notice": "Get the state root for the given block number."
      },
      "setup()": {
        "notice": "Setup function for origin observer contract."
      }
    },
    "notice": "This contract stores the state root and block number from the        origin chain. This contract is Coconsensus module. Only coconsensus        contract will be able to anchor the state root."
  }
}